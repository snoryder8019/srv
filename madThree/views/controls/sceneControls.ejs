<style>
  
    .sceneControls {
      position: fixed;
      top: 2%;
      right: 2%;
      z-index: 100; /* Ensure controls are on top */
    }
  
    .sceneControls button {
      margin: 5px;
      padding: 10px;
      background-color: rgba(255, 255, 255, 0.8);
      border-radius: 4px;
      cursor: pointer;
      text-align: center;
      font-size: 18px;
      width: 50px;
      border: none;
      user-select: none; /* Prevent text selection */
      touch-action: none; /* Prevent touch highlight */
    }
  
    .pathSlider {
      position: fixed;
      bottom: 10%;
      left: 50%;
      transform: translateX(-50%);
      z-index: 100; /* Ensure slider is on top */
    }
    .pathSlider label{
        color:gold
    }
  
    #slider {
      width: 300px;
    }
  
    #returnButton {
      position: fixed;
      bottom: 5%;
      left: 50%;
      transform: translateX(-50%);
      background-color: #f00;
      color: #fff;
      padding: 10px 20px;
      cursor: pointer;
      border-radius: 5px;
      z-index: 100;
      text-align: center;
      border: none;
      user-select: none; /* Prevent text selection */
      touch-action: none; /* Prevent touch highlight */
    }
  </style>
  
  <div class="sceneControls">
    <button class="up">U</button>
    <button class="down">D</button>
    <button class="left">L</button>
    <button class="right">R</button>
    <button class="zoomIn">+</button>
    <button class="zoomOut">-</button>
  </div>
  
  <div class="pathSlider">
    <label>Scroll Through Space</label>
    <input type="range" min="0" max="98" value="0" id="slider">
    <span id="sliderValue">0</span>
  </div>
  
  <div id="returnButton">Return to madLadsLab</div>
  
  <script>
    //views/controls/sceneControls.ejs **GPT_dont remove this comment**
    // Update the slider value in real-time
    document.addEventListener('DOMContentLoaded', () => {
      const slider = document.getElementById('slider');
      const sliderValue = document.getElementById('sliderValue');
      
      slider.addEventListener('input', () => {
        sliderValue.textContent = slider.value; // Update the slider value display
  
        // Dispatch event to interact with the Three.js scene
        document.dispatchEvent(new CustomEvent('sliderChange', { detail: slider.value }));
      });
    });
  // Listen for slider changes and update both camera and billboard positions
// Adjusted slider event listener for smoother camera orientation


// Updated slider event listener for smooth position and rotation
// Updated slider event listener for smooth, steady camera movement
// Updated slider event listener for fixed forward view
slider.addEventListener('input', function () {
  const t = slider.value / 100; // Normalize slider value (0-100) to a range of 0-1
  sliderValue.textContent = `${slider.value}%`;

  // Move camera along the path, keeping a fixed forward direction
  const positionOnPath = cameraPath.getPointAt(t);
  camera.position.copy(positionOnPath);

  // Set a fixed rotation for the camera to always look in a forward direction
  camera.rotation.set(0, Math.PI, 0); // Adjust Y rotation if needed to face forward
});


// document.addEventListener('sliderChange', (event) => {
//   const t = event.detail / 100; // Normalize slider value (0-100) to a range of 0-1

//   // Get the camera position on the path
//   const positionOnPath = cameraPath.getPointAt(t);
//   camera.position.copy(positionOnPath);

//   // Calculate the look-ahead point slightly further along the path
//   const lookAtPoint = cameraPath.getPointAt((t + 0.01) % 1);

//   // Create a direction vector from the current position to the look-at point
//   const direction = new THREE.Vector3().subVectors(lookAtPoint, positionOnPath).normalize();
  
//   // Set camera orientation using a quaternion to avoid abrupt snapping
//   const quaternion = new THREE.Quaternion().setFromUnitVectors(
//     new THREE.Vector3(0, 0, -1), // Default forward direction
//     direction
//   );
//   camera.quaternion.slerp(quaternion, 0.1); // Smooth interpolation

//   // Update billboard position along the path as well
//   if (billboard) {
//     billboard.position.copy(positionOnPath);
//   }
// });


    // Redirect to madLadsLab.com when return button is clicked
    document.addEventListener('DOMContentLoaded', () => {
      const button = document.getElementById('returnButton');
  
      button.addEventListener('click', () => {
        window.location.href = 'https://www.madLadsLab.com'; // Redirect on button click
      });
    });
  </script>
  