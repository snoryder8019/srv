<script>
  //views/three/firstScene.ejs **GPT_dont remove this comment**
    let isDragging = false;
    let previousMousePosition = { x: 0, y: 0 };
    let modelRotation = { x: 0, y: Math.PI }; // Start Y rotation at 180 degrees
    let previousTouchPosition = { x: 0, y: 0 }; // For mobile touch events
    let isFollowingPath = true; // Track if the camera is following the path
  
    const scene = new THREE.Scene();
  
    // Set up the camera
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.set(3, 2, 10); // Initial camera position
  
    // Create a renderer with antialiasing enabled and alpha for transparency
    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setPixelRatio(window.devicePixelRatio); // Ensure sharp rendering on high-DPI devices
    renderer.setClearColor(0x000000, 0); // Transparent background for renderer
    document.body.appendChild(renderer.domElement);
  
    // Make the canvas responsive to window resizing
    window.addEventListener('resize', () => {
      const width = window.innerWidth;
      const height = window.innerHeight;
      renderer.setSize(width, height);
      camera.aspect = width / height;
      camera.updateProjectionMatrix();
    });
  
    // Add lighting
    const ambientLight = new THREE.AmbientLight(0x96FFE7, 1.5); // Soft overall light
scene.add(ambientLight);

// Directional light for highlights and reflections
const directionalLight = new THREE.DirectionalLight(0x96FFE7, 1);
directionalLight.position.set(10, 10, 10).normalize(); // Position it slightly above and to the right
scene.add(directionalLight);

// Point light for additional highlights
const pointLight = new THREE.PointLight(0xFFDD000, 2, 50); // Bright, close-range light
pointLight.position.set(0, 0, 10); // Position the light in front of the model
scene.add(pointLight);

// Optional: Another point light behind the model to create backlighting
const backLight = new THREE.PointLight(0x800080, 1, 50);
backLight.position.set(-10, 5, -10); // Light from behind for extra contrast
scene.add(backLight);

  
    // Define a path for the camera to follow using CatmullRomCurve3
// Define a smoother path with intermediate points and lower tension
const pathPoints = [
  new THREE.Vector3(3, 2, 20),   // Start far from the model
  new THREE.Vector3(3, 3, 15),   // Intermediate point to smooth the approach
  new THREE.Vector3(3, 3, 10),   // Move closer
  new THREE.Vector3(2, 2, 7.5),  // Intermediate point for smoother transition
  new THREE.Vector3(0, 2, 5),    // Sweep past the model
  new THREE.Vector3(-3, 2, 2.5), // Intermediate for smoother transition
  new THREE.Vector3(-5, 2, 0),   // Continue past
  new THREE.Vector3(-8, 3, -5),  // Additional intermediate point
  new THREE.Vector3(-10, 5, -10),// Move away
  new THREE.Vector3(-15, 5, -20),// Smoother transition point
  new THREE.Vector3(-20, 5, -40) // Final point
];

// Create the CatmullRomCurve3 with lower tension for smoother movement
const cameraPath = new THREE.CatmullRomCurve3(pathPoints, false, "catmullrom", 0.3); // Lower tension for smoothness
  // Load and place the billboard model along the path

// Load and place the billboard model along the path
const loader = new THREE.GLTFLoader();
let billboard;
loader.load('/threeDModels/billboard.glb', (gltf) => {
  billboard = gltf.scene;
  scene.add(billboard);
  billboard.scale.set(1, 1, 1); // Adjust scale as needed
  billboard.position.set(-20, 5, -40);
  billboard.rotation.x = Math.PI / 7; // 30 degrees tilt in X-axis
  billboard.rotation.y = Math.PI / 7; // 45 degrees tilt in Y-axis

  // Load font and create text geometry for the billboard
  const fontLoader = new THREE.FontLoader();
  const bill1TextBody = "Welcome to Madladslab in 3d!!!"
  fontLoader.load('/fonts/Space Grotesk_Regular.json', (font) => {
    const textGeometry = new THREE.TextGeometry(bill1TextBody, {
      font: font,
      size: 0.2,    // Adjust size to fit within the billboard
      height: 0.3,  // Depth of the text
      curveSegments: 12,
     // bevelEnabled: true,
     // bevelThickness: 0.03,
     // bevelSize: 0.05,
     // bevelSegments: 5,
    });

    const textMaterial = new THREE.MeshStandardMaterial({ color: 0x000000 }); // Gold color for text
    const textMesh = new THREE.Mesh(textGeometry, textMaterial);

    // Center the text within the billboard dimensions
    textGeometry.center();
    textMesh.position.set(0, 0.5, 0.1); // Slightly in front of the billboard
    
    // Add text mesh to the billboard
    billboard.add(textMesh);
  });
}, undefined, (error) => {
  console.error('An error occurred while loading the billboard model', error);
});


    // Load the GLTF model
    let model;
loader.load('/threeDModels/beaker_pack.glb', function (gltf) {
  model = gltf.scene;
  scene.add(model);

  model.traverse(function (node) {
    if (node.isMesh) {
      node.material = new THREE.MeshPhysicalMaterial({
        color: 0xffffff, // Adjust color if needed
        metalness: 0.1, // Low metalness for a glassy effect
        roughness: 0.1, // Lower roughness for a smooth, reflective surface
        transmission: 1, // Enable transmission for glass-like effect (1 = fully transparent)
        opacity: 1.55, // Set opacity for transparency
        transparent: true, // Allow material transparency
        reflectivity: 0.9, // High reflectivity for shiny glass
        clearcoat: 1, // Add a clearcoat layer for extra glossiness
        clearcoatRoughness: 0, // Clearcoat smoothness
        envMapIntensity: 1, // Intensity of environment map reflections (if available)
      });
    }
  });

  model.position.set(0, 0, 0); // Keep it centered
  model.scale.set(0.6, 0.6, 0.6); // Scale the model down
  model.rotation.y = Math.PI; // Rotate the model 180 degrees on the Y-axis
// Create the left meatball (larger eye)
const meatballLGeometry = new THREE.SphereGeometry(0.5, 32, 32); // Larger size for left eye
const meatballLMaterial = new THREE.MeshStandardMaterial({ color: 0xFFFFFF }); // White meatball (left eye)
const leftMeatball = new THREE.Mesh(meatballLGeometry, meatballLMaterial);
leftMeatball.position.set(-5.3, 8.3, -1.7); // Adjust position relative to the beaker model
model.add(leftMeatball); // Add it to the beaker model

// Create the right meatball (smaller eye)
const meatballRGeometry = new THREE.SphereGeometry(0.3, 32, 32); // Smaller size for right eye
const meatballRMaterial = new THREE.MeshStandardMaterial({ color: 0xFFFFFF }); // White meatball (right eye)
const rightMeatball = new THREE.Mesh(meatballRGeometry, meatballRMaterial);
rightMeatball.position.set(-6.2, 8.5,-1.7); // Adjust position relative to the beaker model
model.add(rightMeatball); // Add it to the beaker model

// Create pupils
const pupilGeometry = new THREE.SphereGeometry(0.05, 32, 32); // Small sphere for pupils
const pupilMaterial = new THREE.MeshStandardMaterial({ color: 0x000000 }); // Black pupils

// Add pupil to left (larger) meatball
const leftPupil = new THREE.Mesh(pupilGeometry, pupilMaterial);
leftPupil.position.set(0, 0, -0.5); // Position the pupil slightly in front
leftMeatball.add(leftPupil); // Attach to the left meatball

// Add pupil to right (smaller) meatball
const rightPupil = new THREE.Mesh(pupilGeometry, pupilMaterial);
rightPupil.position.set(0, 0, -0.38); // Position the pupil slightly in front
rightMeatball.add(rightPupil); // Attach to the right meatball



}, undefined, function (error) {
  console.error('An error happened while loading the model', error);
});
loader.load('/threeDModels/textOfMadLadslab.glb', function (gltf) {
  textModel = gltf.scene;
  scene.add(textModel);

  // Adjust text model's position, scale, and rotation as needed
  textModel.position.set(0, -2, -1.2);  // Position text as needed
  textModel.scale.set(0.5, 0.5, 0.5);  // Scale down the text
  textModel.rotation.z = Math.PI / 2.2;   // Rotate 90 degrees on Z-axis
  textModel.rotation.y = Math.PI / 2.2; // Slight rotation on Y-axis

  // Apply shiny gold material with enhanced properties
  textModel.traverse(function (node) {
    if (node.isMesh) {
      node.material = new THREE.MeshPhysicalMaterial({
        color: 0x96fee7,       // Gold color
        metalness: 1,          // Maximum metalness for shiny gold
        roughness: 0.05,       // Low roughness for smooth surface
        reflectivity: 1,       // High reflectivity for shiny look
        clearcoat: 1,          // Add clearcoat for extra glossiness
        clearcoatRoughness: 0, // Keep clearcoat smooth
        emissive: 0x96Fee7,    // Slight emissive effect for a glowing gold
        emissiveIntensity: 0.2 // Adjust emissive intensity for subtle glow
      });
    }
  });

}, undefined, function (error) {
  console.error('An error occurred while loading the text model', error);
});

  
    const canvas = renderer.domElement;
  
    // Helper function for handling both mouse and touch drag events
    function getTouchOrMousePosition(event) {
      return event.touches ? { x: event.touches[0].clientX, y: event.touches[0].clientY } : { x: event.clientX, y: event.clientY };
    }
  
    // Handle scrollwheel zooming and touch pinch zoom
    canvas.addEventListener('wheel', function (event) {
      const delta = event.deltaY * 0.01; // Adjust zoom sensitivity
      camera.position.z += delta; // Move the camera in/out on Z-axis
    });
  
    // Handle mouse and touch for dragging/rotating the model
    canvas.addEventListener('mousedown', function (event) {
      if (event.target.tagName === 'INPUT' || event.target.tagName === 'BUTTON') return;
      isDragging = true;
      previousMousePosition = getTouchOrMousePosition(event);
    });
  
    canvas.addEventListener('mousemove', function (event) {
      if (isDragging && model) {
        const currentMousePosition = getTouchOrMousePosition(event);
        const deltaMove = {
          x: currentMousePosition.x - previousMousePosition.x,
          y: currentMousePosition.y - previousMousePosition.y
        };
  
        modelRotation.y += deltaMove.x * 0.01;
        modelRotation.x += deltaMove.y * 0.01;
  
        model.rotation.y = modelRotation.y;
        model.rotation.x = modelRotation.x;
  
        previousMousePosition = currentMousePosition;
      }
    });
  
    canvas.addEventListener('mouseup', function () {
      isDragging = false;
    });
  
    canvas.addEventListener('mouseleave', function () {
      isDragging = false;
    });
  
    // Touch support for dragging on mobile
    canvas.addEventListener('touchstart', function (event) {
      isDragging = true;
      previousTouchPosition = getTouchOrMousePosition(event);
    });
  
    canvas.addEventListener('touchmove', function (event) {
      if (isDragging && model) {
        const currentTouchPosition = getTouchOrMousePosition(event);
        const deltaMove = {
          x: currentTouchPosition.x - previousTouchPosition.x,
          y: currentTouchPosition.y - previousTouchPosition.y
        };
  
        modelRotation.y += deltaMove.x * 0.01;
        modelRotation.x += deltaMove.y * 0.01;
  
        model.rotation.y = modelRotation.y;
        model.rotation.x = modelRotation.x;
  
        previousTouchPosition = currentTouchPosition;
      }
    });
  
    canvas.addEventListener('touchend', function () {
      isDragging = false;
    });
  
    // Handle camera path via slider
    const slider = document.getElementById('slider');
    const sliderValue = document.getElementById('sliderValue');
  
    slider.addEventListener('input', function () {
      const t = slider.value / 100; // Normalize slider value (0-100) to a range of 0-1
      sliderValue.textContent = `${slider.value}%`;
  
      const positionOnPath = cameraPath.getPointAt(t);
      camera.position.copy(positionOnPath);  // Move camera to position on path
  
      const lookAtPoint = cameraPath.getPointAt((t + 0.01) % 1);
      camera.lookAt(lookAtPoint);
    });
  
    // Camera control buttons
    document.querySelector('.up').addEventListener('click', () => {
      camera.position.y += 0.5;
    });
  
    document.querySelector('.down').addEventListener('click', () => {
      camera.position.y -= 0.5;
    });
  
    document.querySelector('.left').addEventListener('click', () => {
      camera.position.x -= 0.5;
    });
  
    document.querySelector('.right').addEventListener('click', () => {
      camera.position.x += 0.5;
    });
  
    document.querySelector('.zoomIn').addEventListener('click', () => {
      camera.position.z -= 0.5;
    });
  
    document.querySelector('.zoomOut').addEventListener('click', () => {
      camera.position.z += 0.5;
    });
  
    // Animation loop
    const animate = function () {
      requestAnimationFrame(animate);
   
      renderer.render(scene, camera);
    };
  
    animate();
  </script>
  