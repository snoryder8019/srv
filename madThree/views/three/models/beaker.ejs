<script>
     // Load the GLTF model
     let model;
const loader = new THREE.GLTFLoader();
loader.load('/threeDModels/beaker_pack.glb', function (gltf) {
  model = gltf.scene;
  scene.add(model);

  model.traverse(function (node) {
    if (node.isMesh) {
      node.material = new THREE.MeshPhysicalMaterial({
        color: 0xffffff, // Adjust color if needed
        metalness: 0.1, // Low metalness for a glassy effect
        roughness: 0.1, // Lower roughness for a smooth, reflective surface
        transmission: 1, // Enable transmission for glass-like effect (1 = fully transparent)
        thickness: 1.0, // Thickness of the glass material
        opacity: 1.55, // Set opacity for transparency
        transparent: true, // Allow material transparency
        reflectivity: 0.9, // High reflectivity for shiny glass
        clearcoat: 1, // Add a clearcoat layer for extra glossiness
        clearcoatRoughness: 0, // Clearcoat smoothness
        envMapIntensity: 1, // Intensity of environment map reflections (if available)
      });
    }
  });

  model.position.set(0, 0, 0); // Keep it centered
  model.scale.set(0.6, 0.6, 0.6); // Scale the model down
  model.rotation.y = Math.PI; // Rotate the model 180 degrees on the Y-axis
// Create the left meatball (larger eye)
const meatballLGeometry = new THREE.SphereGeometry(0.5, 32, 32); // Larger size for left eye
const meatballLMaterial = new THREE.MeshStandardMaterial({ color: 0xFFFFFF }); // White meatball (left eye)
const leftMeatball = new THREE.Mesh(meatballLGeometry, meatballLMaterial);
leftMeatball.position.set(-5.3, 8.3, -1.7); // Adjust position relative to the beaker model
model.add(leftMeatball); // Add it to the beaker model

// Create the right meatball (smaller eye)
const meatballRGeometry = new THREE.SphereGeometry(0.3, 32, 32); // Smaller size for right eye
const meatballRMaterial = new THREE.MeshStandardMaterial({ color: 0xFFFFFF }); // White meatball (right eye)
const rightMeatball = new THREE.Mesh(meatballRGeometry, meatballRMaterial);
rightMeatball.position.set(-6.2, 8.5,-1.7); // Adjust position relative to the beaker model
model.add(rightMeatball); // Add it to the beaker model

// Create pupils
const pupilGeometry = new THREE.SphereGeometry(0.05, 32, 32); // Small sphere for pupils
const pupilMaterial = new THREE.MeshStandardMaterial({ color: 0x000000 }); // Black pupils

// Add pupil to left (larger) meatball
const leftPupil = new THREE.Mesh(pupilGeometry, pupilMaterial);
leftPupil.position.set(0, 0, -0.5); // Position the pupil slightly in front
leftMeatball.add(leftPupil); // Attach to the left meatball

// Add pupil to right (smaller) meatball
const rightPupil = new THREE.Mesh(pupilGeometry, pupilMaterial);
rightPupil.position.set(0, 0, -0.38); // Position the pupil slightly in front
rightMeatball.add(rightPupil); // Attach to the right meatball



}, undefined, function (error) {
  console.error('An error happened while loading the model', error);
});
</script>